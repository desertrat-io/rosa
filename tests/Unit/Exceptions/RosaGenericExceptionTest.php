<?php


namespace RosaTest\Unit\Exceptions;

use Rosa\Collections\Data\Group;
use Rosa\Exceptions\RosaGenericException;
use Rosa\Interfaces\Constant\Http;
use Rosa\Interfaces\Exception\ExceptionActions;
use Rosa\Interfaces\Exception\ExceptionTypes;
use Rosa\Interfaces\Exception\RosaException;
use RosaTest\Unit\RosaTestCase;

/**
 * Class RosaGenericExceptionTest
 * @package RosaTest\Unit\Exceptions
 */
class RosaGenericExceptionTest extends RosaTestCase
{

    /**
     * @var \PHPUnit\Framework\MockObject\MockObject|Group
     */
    protected $group;

    /**
     * @throws \ReflectionException
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->group = $this->getMockForAbstractClass(Group::class);
    }

    public function testGenericExceptionThrows(): void
    {
        $this->group->setDefaultExceptionHandler(RosaGenericException::class, 'Exception Test');
        $this->expectException(RosaGenericException::class);
        $this->expectExceptionMessage('Exception Test');
        $this->group->append(null, false);
    }

    public function testGenericExceptionCode(): void
    {
        $this->group->setDefaultExceptionHandler(RosaGenericException::class, 'Code Test');
        try {
            $this->group->append(null, false);
        } catch (RosaException $exception) { // using this so we can test the custom methods easily
            $code = ExceptionActions::ROSA_GENERIC_ACT & ExceptionTypes::ROSA_GENERIC_EXCEPTION;
            $this->assertEquals($code, $exception->getErrorCode());
            $this->assertEquals(Http::SERVER_ERROR, $exception->getHttpCode());
        }
    }
}
